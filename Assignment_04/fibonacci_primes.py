# -*- coding: utf-8 -*-
"""Fibonacci primes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zLUdgEmY7gBX8Zd4N-J3lltyyLznetn6
"""

!apt-get update
!apt-get install -y primesieve
!apt-get install -y libprimesieve-dev

!pip install primesieve

i=2; N=10
L = [n**i for n in range(1, N)]

G = (n**i for n in range(1, N))

[l for l in L]

[g for g in G]

[g for g in G]

def GG():
  for n in range(1, N):
    yield n**i

G2 = GG()
print(*G2) # see that you get the same values as before

G2 = GG()
# get the first 3 values of the sequence using next:
next(G2), next(G2), next(G2)

print(*G2) # print the remaining values of the sequence

i = -20
N = 10**8

pip install memory_profiler

# Commented out IPython magic to ensure Python compatibility.
# %load_ext memory_profiler

# Commented out IPython magic to ensure Python compatibility.
# %memit sum([n**i for n in range(1, N)])

G3 = (n**i for n in range(1, N))
s = 0
for g in G3:
  s += g
  if g < 1e-15:
    break

print(s)

def natural_numbers():
  n = 0
  while True:
    yield n
    n += 1

for n in natural_numbers():
  print(n)
  if n >= 5:
    break # don't go into infinite loop!

def fibonacci(max):
  f, fnext = 0, 1
  while f < max:
    yield f
    f, fnext = fnext, f + fnext

Fn = fibonacci(10000)
print(*Fn)

P = [2, 3]

[4 % p for p in P]

all([4 % p for p in P])

all([5 % p for p in P])

def prime_numbers(N):
  primes = []
  q = 1
  for n in range(q+1, N):
    if all(n % p > 0 for p in primes):
      primes.append(n)
      q = n
      yield n

list(prime_numbers(70))

def fibonacci_primes(N):
  F = set(fibonacci(N))
  P = set(prime_numbers(N))
  print('Intersecting', len(P), 'primes with', len(F), 'fibonaccis.')
  return P.intersection(F)
fibonacci_primes(100000)

nFP = [3, 4, 5, 7, 11, 13, 17, 23, 29, 43]

def test_fibonacci_prime():
  N = 10000
  F = list(fibonacci(N))
  nFP = [3, 4, 5, 7, 11, 13, 17, 23, 29, 43]

  our_list = fibonacci_primes(N)
  known_list = set([F[n] for n in nFP if n < len(F)])
  assert len(known_list.difference(our_list))==0, 'We have a bug!'
  print('Passed test!')

test_fibonacci_prime()

!pip install pytest

!pytest /content/pyfiles/fibonacci_primes

from primesieve import primes # do after you have installed primesieve
list(primes(70))

# Commented out IPython magic to ensure Python compatibility.
# %timeit primes(1000)

# Commented out IPython magic to ensure Python compatibility.
# %timeit list(prime_numbers(1000))

import primesieve, math

def is_square(n):
  s = int(math.sqrt(n))
  return s*s == n


it = primesieve.Iterator()
it.skipto(2**28-1)
p = it.next_prime()


while p < 2**30-1:
  if is_square(5*p*p+4) or is_square(5*p*p-4):
    print('¡¡ Got one !! ', p, 'is a Fibonacci prime!')
  p = it.next_prime()

